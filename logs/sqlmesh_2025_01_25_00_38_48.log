2025-01-25 00:38:48,517 - MainThread - sqlmesh.core.config.connection - INFO - Creating new DuckDB adapter for data files: {'md:obsidian_insights?motherduck_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJpdHRlci1wb2xkZXJzMHhAaWNsb3VkLmNvbSIsInNlc3Npb24iOiJiaXR0ZXItcG9sZGVyczB4LmljbG91ZC5jb20iLCJwYXQiOiJfTF9SYV9KQ2k2YkdiOWVQX1M3Ny1TdVN6ZnpDMXA2aGFRb0hRZVVTaXB3IiwidXNlcklkIjoiNGNlOGUyYTktN2MyZC00NTI4LWJhN2ItZmVmNGVlZmIxOTBkIiwiaXNzIjoibWRfcGF0IiwicmVhZE9ubHkiOmZhbHNlLCJ0b2tlblR5cGUiOiJyZWFkX3dyaXRlIiwiaWF0IjoxNzM3NzUzOTA0fQ.sHj8UbDMv4_DNfv_S5CAaGNcFsPE0T5FSyMNIE7d664'} (connection.py:313)
2025-01-25 00:38:49,149 - MainThread - sqlmesh.core.config.connection - INFO - Using existing DuckDB adapter due to overlapping data file: md:obsidian_insights?motherduck_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJpdHRlci1wb2xkZXJzMHhAaWNsb3VkLmNvbSIsInNlc3Npb24iOiJiaXR0ZXItcG9sZGVyczB4LmljbG91ZC5jb20iLCJwYXQiOiJfTF9SYV9KQ2k2YkdiOWVQX1M3Ny1TdVN6ZnpDMXA2aGFRb0hRZVVTaXB3IiwidXNlcklkIjoiNGNlOGUyYTktN2MyZC00NTI4LWJhN2ItZmVmNGVlZmIxOTBkIiwiaXNzIjoibWRfcGF0IiwicmVhZE9ubHkiOmZhbHNlLCJ0b2tlblR5cGUiOiJyZWFkX3dyaXRlIiwiaWF0IjoxNzM3NzUzOTA0fQ.sHj8UbDMv4_DNfv_S5CAaGNcFsPE0T5FSyMNIE7d664 (connection.py:309)
2025-01-25 00:38:49,149 - MainThread - sqlmesh.core.config.scheduler - WARNING - The motherduck engine is not recommended for storing SQLMesh state in production deployments. Please see https://sqlmesh.readthedocs.io/en/stable/guides/configuration/#state-connection for a list of recommended engines and more information. (scheduler.py:112)
2025-01-25 00:38:56,252 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Listing data objects in schema obsidian_insights.sqlmesh__bronze (evaluator.py:316)
2025-01-25 00:38:56,253 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT CURRENT_CATALOG() (base.py:2079)
2025-01-25 00:38:56,254 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT CURRENT_CATALOG() (base.py:2079)
2025-01-25 00:38:56,256 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT table_name AS name, table_schema AS schema, CASE table_type WHEN 'BASE TABLE' THEN 'table' WHEN 'VIEW' THEN 'view' WHEN 'LOCAL TEMPORARY' THEN 'table' END AS type FROM system.information_schema.tables WHERE (table_catalog = 'obsidian_insights' AND table_schema = 'sqlmesh__bronze') AND table_name IN ('bronze__snp__northwind__supplier_dto__3745750597', 'bronze__snp__northwind__detail__1173542915', 'bronze__snp__northwind__region_dto__163296225__temp', 'bronze__snp__northwind__supplier_dto__4106408782__temp', 'bronze__snp__northwind__order_detail_dto__1441025332__temp', 'bronze__snp__northwind__category_dto__1591367316__temp', 'bronze__snp__northwind__product_dto__2827898724__temp', 'bronze__snp__northwind__customer_dto__2166131901', 'bronze__snp__northwind__territory_dto__2324498129__temp', 'bronze__snp__northwind__product_dto__2886397162', 'bronze__snp__northwind__territory_dto__4219979839', 'bronze__snp__northwind__employee_dto__3691793490__temp', 'bronze__snp__northwind__order_dto__3682785387', 'bronze__snp__northwind__customer_dto__3769547417__temp', 'bronze__snp__northwind__employee_dto__3507925551', 'bronze__snp__northwind__detail__1071603293__temp', 'bronze__snp__northwind__shipper_dto__87578496__temp', 'bronze__snp__northwind__shipper_dto__3510199919', 'bronze__snp__northwind__order_dto__347774268__temp', 'bronze__snp__northwind__order_detail_dto__20056212', 'bronze__snp__northwind__region_dto__2096871330', 'bronze__snp__northwind__category_dto__2095785216') (base.py:2079)
2025-01-25 00:38:56,307 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating schema 'obsidian_insights.sqlmesh__bronze' (evaluator.py:1044)
2025-01-25 00:38:56,307 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE SCHEMA IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze" (base.py:2079)
2025-01-25 00:38:56,648 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__category_dto__1591367316__temp' (evaluator.py:1349)
2025-01-25 00:38:56,650 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" AS SELECT CAST("c"."category_id" AS BIGINT) AS "category_id", CAST("c"."category_name" AS TEXT) AS "category_name", CAST("c"."description" AS TEXT) AS "description", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."category_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."category_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."description" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__category_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:56,981 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__category_dto__2095785216' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__category_dto": 1485111335>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:57,004 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__customer_dto__3769547417__temp' (evaluator.py:1349)
2025-01-25 00:38:57,006 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" AS SELECT CAST("c"."customer_id" AS TEXT) AS "customer_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."contact_name" AS TEXT) AS "contact_name", CAST("c"."contact_title" AS TEXT) AS "contact_title", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."fax" AS TEXT) AS "fax", CAST("c"."region" AS TEXT) AS "region", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."customer_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."fax" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__customer_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:57,231 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__customer_dto__2166131901' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__customer_dto": 2092139393>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:57,242 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__detail__1071603293__temp' (evaluator.py:1349)
2025-01-25 00:38:57,243 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" AS SELECT CAST("c"."value" AS TEXT) AS "value", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."value" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__detail" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:57,466 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__detail__1173542915' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__detail": 1321489785>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:57,500 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__employee_dto__3691793490__temp' (evaluator.py:1349)
2025-01-25 00:38:57,505 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" AS SELECT CAST("c"."employee_id" AS BIGINT) AS "employee_id", CAST("c"."last_name" AS TEXT) AS "last_name", CAST("c"."first_name" AS TEXT) AS "first_name", CAST("c"."title" AS TEXT) AS "title", CAST("c"."title_of_courtesy" AS TEXT) AS "title_of_courtesy", CAST("c"."birth_date" AS TIMESTAMP) AS "birth_date", CAST("c"."hire_date" AS TIMESTAMP) AS "hire_date", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."region" AS TEXT) AS "region", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."home_phone" AS TEXT) AS "home_phone", CAST("c"."extension" AS TEXT) AS "extension", CAST("c"."photo" AS TEXT) AS "photo", CAST("c"."notes" AS TEXT) AS "notes", CAST("c"."reports_to" AS BIGINT) AS "reports_to", CAST("c"."photo_path" AS TEXT) AS "photo_path", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."employee_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."last_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."first_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."title_of_courtesy" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."birth_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."hire_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."home_phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."extension" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."photo" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."notes" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."reports_to" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."photo_path" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__employee_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:57,730 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__employee_dto__3507925551' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__employee_dto": 4268847768>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:57,748 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_detail_dto__1441025332__temp' (evaluator.py:1349)
2025-01-25 00:38:57,750 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" AS SELECT CAST("c"."order_id" AS BIGINT) AS "order_id", CAST("c"."product_id" AS BIGINT) AS "product_id", CAST("c"."unit_price" AS DOUBLE) AS "unit_price", CAST("c"."quantity" AS BIGINT) AS "quantity", CAST("c"."discount" AS BIGINT) AS "discount", CAST("c"."discount__v_double" AS DOUBLE) AS "discount__v_double", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."order_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."product_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."unit_price" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."quantity" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discount" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discount__v_double" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__order_detail_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:57,980 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_detail_dto__20056212' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_detail_dto": 2218394157>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:58,009 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_dto__347774268__temp' (evaluator.py:1349)
2025-01-25 00:38:58,013 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" AS SELECT CAST("c"."order_id" AS BIGINT) AS "order_id", CAST("c"."customer_id" AS TEXT) AS "customer_id", CAST("c"."employee_id" AS BIGINT) AS "employee_id", CAST("c"."order_date" AS TIMESTAMP) AS "order_date", CAST("c"."required_date" AS TIMESTAMP) AS "required_date", CAST("c"."shipped_date" AS TIMESTAMP) AS "shipped_date", CAST("c"."ship_via" AS BIGINT) AS "ship_via", CAST("c"."freight" AS DOUBLE) AS "freight", CAST("c"."ship_name" AS TEXT) AS "ship_name", CAST("c"."ship_address" AS TEXT) AS "ship_address", CAST("c"."ship_city" AS TEXT) AS "ship_city", CAST("c"."ship_postal_code" AS TEXT) AS "ship_postal_code", CAST("c"."ship_country" AS TEXT) AS "ship_country", CAST("c"."ship_region" AS TEXT) AS "ship_region", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."order_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."customer_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."employee_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."order_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."required_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."shipped_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_via" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."freight" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_region" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__order_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:58,240 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_dto__3682785387' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_dto": 357419722>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:58,260 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__product_dto__2827898724__temp' (evaluator.py:1349)
2025-01-25 00:38:58,263 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" AS SELECT CAST("c"."product_id" AS BIGINT) AS "product_id", CAST("c"."product_name" AS TEXT) AS "product_name", CAST("c"."supplier_id" AS BIGINT) AS "supplier_id", CAST("c"."category_id" AS BIGINT) AS "category_id", CAST("c"."quantity_per_unit" AS TEXT) AS "quantity_per_unit", CAST("c"."unit_price" AS DOUBLE) AS "unit_price", CAST("c"."units_in_stock" AS BIGINT) AS "units_in_stock", CAST("c"."units_on_order" AS BIGINT) AS "units_on_order", CAST("c"."reorder_level" AS BIGINT) AS "reorder_level", CAST("c"."discontinued" AS BOOLEAN) AS "discontinued", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."product_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."product_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."supplier_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."category_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."quantity_per_unit" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."unit_price" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."units_in_stock" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."units_on_order" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."reorder_level" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discontinued" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__product_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:58,494 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__product_dto__2886397162' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__product_dto": 3260133097>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:58,506 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__region_dto__163296225__temp' (evaluator.py:1349)
2025-01-25 00:38:58,508 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" AS SELECT CAST("c"."region_id" AS BIGINT) AS "region_id", CAST("c"."region_description" AS TEXT) AS "region_description", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."region_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region_description" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__region_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:58,732 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__region_dto__2096871330' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__region_dto": 64704867>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:58,747 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__shipper_dto__87578496__temp' (evaluator.py:1349)
2025-01-25 00:38:58,750 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" AS SELECT CAST("c"."shipper_id" AS BIGINT) AS "shipper_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."shipper_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__shipper_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:58,976 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__shipper_dto__3510199919' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__shipper_dto": 4242341337>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:59,000 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__supplier_dto__4106408782__temp' (evaluator.py:1349)
2025-01-25 00:38:59,004 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" AS SELECT CAST("c"."supplier_id" AS BIGINT) AS "supplier_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."contact_name" AS TEXT) AS "contact_name", CAST("c"."contact_title" AS TEXT) AS "contact_title", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."region" AS TEXT) AS "region", CAST("c"."home_page" AS TEXT) AS "home_page", CAST("c"."fax" AS TEXT) AS "fax", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."supplier_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."home_page" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."fax" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__supplier_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:59,245 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__supplier_dto__3745750597' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__supplier_dto": 3378220366>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:38:59,260 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__territory_dto__2324498129__temp' (evaluator.py:1349)
2025-01-25 00:38:59,261 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" AS SELECT CAST("c"."territory_id" AS TEXT) AS "territory_id", CAST("c"."territory_description" AS TEXT) AS "territory_description", CAST("c"."region_id" AS BIGINT) AS "region_id", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."territory_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."territory_description" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region_id" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('1970-01-01 00:00:00' AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "obsidian_insights"."bronze"."raw__northwind__territory_dto" AS "c" WHERE (TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '1970-01-01' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '1970-01-01') AND FALSE LIMIT 0 (base.py:2079)
2025-01-25 00:38:59,485 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Skipping creation of the deployable table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__territory_dto__4219979839' for the forward-only model SnapshotId<"obsidian_insights"."bronze"."snp__northwind__territory_dto": 225752703>. The table will be created when the snapshot is deployed to production (evaluator.py:807)
2025-01-25 00:39:00,591 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__category_dto": 1485111335> (evaluator.py:577)
2025-01-25 00:39:00,600 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__category_dto__1591367316__temp' (evaluator.py:608)
2025-01-25 00:39:00,601 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" (base.py:2079)
2025-01-25 00:39:00,618 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" ("category_id" BIGINT, "category_name" TEXT, "description" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:00,732 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."category_id" AS BIGINT) AS "category_id", CAST("c"."category_name" AS TEXT) AS "category_name", CAST("c"."description" AS TEXT) AS "description", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."category_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."category_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."description" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__category_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."category_id", "static"."category_name", "static"."description", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."category_id" AS "t_category_id", "latest"."category_name" AS "t_category_name", "latest"."description" AS "t_description", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."category_id" AS "category_id", "source"."category_name" AS "category_name", "source"."description" AS "description", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."category_id" AS "t_category_id", "latest"."category_name" AS "t_category_name", "latest"."description" AS "t_description", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."category_id" AS "category_id", "source"."category_name" AS "category_name", "source"."description" AS "description", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_category_id", "joined"."category_id") AS "category_id", COALESCE("joined"."t_category_name", "joined"."category_name") AS "category_name", COALESCE("joined"."t_description", "joined"."description") AS "description", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("category_id" AS BIGINT) AS "category_id", CAST("category_name" AS TEXT) AS "category_name", CAST("description" AS TEXT) AS "description", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "category_id", "category_name", "description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:00,982 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__category_dto": 1485111335> (engine_adapter.py:1031)
2025-01-25 00:39:01,669 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__customer_dto": 2092139393> (evaluator.py:577)
2025-01-25 00:39:01,688 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__customer_dto__3769547417__temp' (evaluator.py:608)
2025-01-25 00:39:01,688 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" (base.py:2079)
2025-01-25 00:39:01,761 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" ("customer_id" TEXT, "company_name" TEXT, "contact_name" TEXT, "contact_title" TEXT, "address" TEXT, "city" TEXT, "postal_code" TEXT, "country" TEXT, "phone" TEXT, "fax" TEXT, "region" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:01,884 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."customer_id" AS TEXT) AS "customer_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."contact_name" AS TEXT) AS "contact_name", CAST("c"."contact_title" AS TEXT) AS "contact_title", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."fax" AS TEXT) AS "fax", CAST("c"."region" AS TEXT) AS "region", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."customer_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."fax" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__customer_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."customer_id", "static"."company_name", "static"."contact_name", "static"."contact_title", "static"."address", "static"."city", "static"."postal_code", "static"."country", "static"."phone", "static"."fax", "static"."region", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."customer_id" AS "t_customer_id", "latest"."company_name" AS "t_company_name", "latest"."contact_name" AS "t_contact_name", "latest"."contact_title" AS "t_contact_title", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."phone" AS "t_phone", "latest"."fax" AS "t_fax", "latest"."region" AS "t_region", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."customer_id" AS "customer_id", "source"."company_name" AS "company_name", "source"."contact_name" AS "contact_name", "source"."contact_title" AS "contact_title", "source"."address" AS "address", "source"."city" AS "city", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."phone" AS "phone", "source"."fax" AS "fax", "source"."region" AS "region", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."customer_id" AS "t_customer_id", "latest"."company_name" AS "t_company_name", "latest"."contact_name" AS "t_contact_name", "latest"."contact_title" AS "t_contact_title", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."phone" AS "t_phone", "latest"."fax" AS "t_fax", "latest"."region" AS "t_region", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."customer_id" AS "customer_id", "source"."company_name" AS "company_name", "source"."contact_name" AS "contact_name", "source"."contact_title" AS "contact_title", "source"."address" AS "address", "source"."city" AS "city", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."phone" AS "phone", "source"."fax" AS "fax", "source"."region" AS "region", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_customer_id", "joined"."customer_id") AS "customer_id", COALESCE("joined"."t_company_name", "joined"."company_name") AS "company_name", COALESCE("joined"."t_contact_name", "joined"."contact_name") AS "contact_name", COALESCE("joined"."t_contact_title", "joined"."contact_title") AS "contact_title", COALESCE("joined"."t_address", "joined"."address") AS "address", COALESCE("joined"."t_city", "joined"."city") AS "city", COALESCE("joined"."t_postal_code", "joined"."postal_code") AS "postal_code", COALESCE("joined"."t_country", "joined"."country") AS "country", COALESCE("joined"."t_phone", "joined"."phone") AS "phone", COALESCE("joined"."t_fax", "joined"."fax") AS "fax", COALESCE("joined"."t_region", "joined"."region") AS "region", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("customer_id" AS TEXT) AS "customer_id", CAST("company_name" AS TEXT) AS "company_name", CAST("contact_name" AS TEXT) AS "contact_name", CAST("contact_title" AS TEXT) AS "contact_title", CAST("address" AS TEXT) AS "address", CAST("city" AS TEXT) AS "city", CAST("postal_code" AS TEXT) AS "postal_code", CAST("country" AS TEXT) AS "country", CAST("phone" AS TEXT) AS "phone", CAST("fax" AS TEXT) AS "fax", CAST("region" AS TEXT) AS "region", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "customer_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "fax", "region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:02,143 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__customer_dto": 2092139393> (engine_adapter.py:1031)
2025-01-25 00:39:02,827 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__detail": 1321489785> (evaluator.py:577)
2025-01-25 00:39:02,834 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__detail__1071603293__temp' (evaluator.py:608)
2025-01-25 00:39:02,835 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" (base.py:2079)
2025-01-25 00:39:02,849 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" ("value" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:02,963 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."value" AS TEXT) AS "value", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."value" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__detail" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."value", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."value" AS "t_value", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."value" AS "value", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."value" AS "t_value", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."value" AS "value", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_value", "joined"."value") AS "value", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("value" AS TEXT) AS "value", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "value", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:03,209 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__detail": 1321489785> (engine_adapter.py:1031)
2025-01-25 00:39:03,896 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__employee_dto": 4268847768> (evaluator.py:577)
2025-01-25 00:39:03,928 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__employee_dto__3691793490__temp' (evaluator.py:608)
2025-01-25 00:39:03,928 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" (base.py:2079)
2025-01-25 00:39:03,968 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" ("employee_id" BIGINT, "last_name" TEXT, "first_name" TEXT, "title" TEXT, "title_of_courtesy" TEXT, "birth_date" TIMESTAMP, "hire_date" TIMESTAMP, "address" TEXT, "city" TEXT, "region" TEXT, "postal_code" TEXT, "country" TEXT, "home_phone" TEXT, "extension" TEXT, "photo" TEXT, "notes" TEXT, "reports_to" BIGINT, "photo_path" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:04,086 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."employee_id" AS BIGINT) AS "employee_id", CAST("c"."last_name" AS TEXT) AS "last_name", CAST("c"."first_name" AS TEXT) AS "first_name", CAST("c"."title" AS TEXT) AS "title", CAST("c"."title_of_courtesy" AS TEXT) AS "title_of_courtesy", CAST("c"."birth_date" AS TIMESTAMP) AS "birth_date", CAST("c"."hire_date" AS TIMESTAMP) AS "hire_date", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."region" AS TEXT) AS "region", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."home_phone" AS TEXT) AS "home_phone", CAST("c"."extension" AS TEXT) AS "extension", CAST("c"."photo" AS TEXT) AS "photo", CAST("c"."notes" AS TEXT) AS "notes", CAST("c"."reports_to" AS BIGINT) AS "reports_to", CAST("c"."photo_path" AS TEXT) AS "photo_path", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."employee_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."last_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."first_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."title_of_courtesy" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."birth_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."hire_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."home_phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."extension" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."photo" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."notes" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."reports_to" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."photo_path" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__employee_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."employee_id", "static"."last_name", "static"."first_name", "static"."title", "static"."title_of_courtesy", "static"."birth_date", "static"."hire_date", "static"."address", "static"."city", "static"."region", "static"."postal_code", "static"."country", "static"."home_phone", "static"."extension", "static"."photo", "static"."notes", "static"."reports_to", "static"."photo_path", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."employee_id" AS "t_employee_id", "latest"."last_name" AS "t_last_name", "latest"."first_name" AS "t_first_name", "latest"."title" AS "t_title", "latest"."title_of_courtesy" AS "t_title_of_courtesy", "latest"."birth_date" AS "t_birth_date", "latest"."hire_date" AS "t_hire_date", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."region" AS "t_region", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."home_phone" AS "t_home_phone", "latest"."extension" AS "t_extension", "latest"."photo" AS "t_photo", "latest"."notes" AS "t_notes", "latest"."reports_to" AS "t_reports_to", "latest"."photo_path" AS "t_photo_path", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."employee_id" AS "employee_id", "source"."last_name" AS "last_name", "source"."first_name" AS "first_name", "source"."title" AS "title", "source"."title_of_courtesy" AS "title_of_courtesy", "source"."birth_date" AS "birth_date", "source"."hire_date" AS "hire_date", "source"."address" AS "address", "source"."city" AS "city", "source"."region" AS "region", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."home_phone" AS "home_phone", "source"."extension" AS "extension", "source"."photo" AS "photo", "source"."notes" AS "notes", "source"."reports_to" AS "reports_to", "source"."photo_path" AS "photo_path", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."employee_id" AS "t_employee_id", "latest"."last_name" AS "t_last_name", "latest"."first_name" AS "t_first_name", "latest"."title" AS "t_title", "latest"."title_of_courtesy" AS "t_title_of_courtesy", "latest"."birth_date" AS "t_birth_date", "latest"."hire_date" AS "t_hire_date", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."region" AS "t_region", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."home_phone" AS "t_home_phone", "latest"."extension" AS "t_extension", "latest"."photo" AS "t_photo", "latest"."notes" AS "t_notes", "latest"."reports_to" AS "t_reports_to", "latest"."photo_path" AS "t_photo_path", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."employee_id" AS "employee_id", "source"."last_name" AS "last_name", "source"."first_name" AS "first_name", "source"."title" AS "title", "source"."title_of_courtesy" AS "title_of_courtesy", "source"."birth_date" AS "birth_date", "source"."hire_date" AS "hire_date", "source"."address" AS "address", "source"."city" AS "city", "source"."region" AS "region", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."home_phone" AS "home_phone", "source"."extension" AS "extension", "source"."photo" AS "photo", "source"."notes" AS "notes", "source"."reports_to" AS "reports_to", "source"."photo_path" AS "photo_path", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_employee_id", "joined"."employee_id") AS "employee_id", COALESCE("joined"."t_last_name", "joined"."last_name") AS "last_name", COALESCE("joined"."t_first_name", "joined"."first_name") AS "first_name", COALESCE("joined"."t_title", "joined"."title") AS "title", COALESCE("joined"."t_title_of_courtesy", "joined"."title_of_courtesy") AS "title_of_courtesy", COALESCE("joined"."t_birth_date", "joined"."birth_date") AS "birth_date", COALESCE("joined"."t_hire_date", "joined"."hire_date") AS "hire_date", COALESCE("joined"."t_address", "joined"."address") AS "address", COALESCE("joined"."t_city", "joined"."city") AS "city", COALESCE("joined"."t_region", "joined"."region") AS "region", COALESCE("joined"."t_postal_code", "joined"."postal_code") AS "postal_code", COALESCE("joined"."t_country", "joined"."country") AS "country", COALESCE("joined"."t_home_phone", "joined"."home_phone") AS "home_phone", COALESCE("joined"."t_extension", "joined"."extension") AS "extension", COALESCE("joined"."t_photo", "joined"."photo") AS "photo", COALESCE("joined"."t_notes", "joined"."notes") AS "notes", COALESCE("joined"."t_reports_to", "joined"."reports_to") AS "reports_to", COALESCE("joined"."t_photo_path", "joined"."photo_path") AS "photo_path", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("employee_id" AS BIGINT) AS "employee_id", CAST("last_name" AS TEXT) AS "last_name", CAST("first_name" AS TEXT) AS "first_name", CAST("title" AS TEXT) AS "title", CAST("title_of_courtesy" AS TEXT) AS "title_of_courtesy", CAST("birth_date" AS TIMESTAMP) AS "birth_date", CAST("hire_date" AS TIMESTAMP) AS "hire_date", CAST("address" AS TEXT) AS "address", CAST("city" AS TEXT) AS "city", CAST("region" AS TEXT) AS "region", CAST("postal_code" AS TEXT) AS "postal_code", CAST("country" AS TEXT) AS "country", CAST("home_phone" AS TEXT) AS "home_phone", CAST("extension" AS TEXT) AS "extension", CAST("photo" AS TEXT) AS "photo", CAST("notes" AS TEXT) AS "notes", CAST("reports_to" AS BIGINT) AS "reports_to", CAST("photo_path" AS TEXT) AS "photo_path", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:04,449 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__employee_dto": 4268847768> (engine_adapter.py:1031)
2025-01-25 00:39:05,137 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_detail_dto": 2218394157> (evaluator.py:577)
2025-01-25 00:39:05,151 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_detail_dto__1441025332__temp' (evaluator.py:608)
2025-01-25 00:39:05,151 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" (base.py:2079)
2025-01-25 00:39:05,171 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" ("order_id" BIGINT, "product_id" BIGINT, "unit_price" DOUBLE, "quantity" BIGINT, "discount" BIGINT, "discount__v_double" DOUBLE, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:05,287 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."order_id" AS BIGINT) AS "order_id", CAST("c"."product_id" AS BIGINT) AS "product_id", CAST("c"."unit_price" AS DOUBLE) AS "unit_price", CAST("c"."quantity" AS BIGINT) AS "quantity", CAST("c"."discount" AS BIGINT) AS "discount", CAST("c"."discount__v_double" AS DOUBLE) AS "discount__v_double", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."order_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."product_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."unit_price" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."quantity" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discount" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discount__v_double" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__order_detail_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."order_id", "static"."product_id", "static"."unit_price", "static"."quantity", "static"."discount", "static"."discount__v_double", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."order_id" AS "t_order_id", "latest"."product_id" AS "t_product_id", "latest"."unit_price" AS "t_unit_price", "latest"."quantity" AS "t_quantity", "latest"."discount" AS "t_discount", "latest"."discount__v_double" AS "t_discount__v_double", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."order_id" AS "order_id", "source"."product_id" AS "product_id", "source"."unit_price" AS "unit_price", "source"."quantity" AS "quantity", "source"."discount" AS "discount", "source"."discount__v_double" AS "discount__v_double", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."order_id" AS "t_order_id", "latest"."product_id" AS "t_product_id", "latest"."unit_price" AS "t_unit_price", "latest"."quantity" AS "t_quantity", "latest"."discount" AS "t_discount", "latest"."discount__v_double" AS "t_discount__v_double", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."order_id" AS "order_id", "source"."product_id" AS "product_id", "source"."unit_price" AS "unit_price", "source"."quantity" AS "quantity", "source"."discount" AS "discount", "source"."discount__v_double" AS "discount__v_double", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_order_id", "joined"."order_id") AS "order_id", COALESCE("joined"."t_product_id", "joined"."product_id") AS "product_id", COALESCE("joined"."t_unit_price", "joined"."unit_price") AS "unit_price", COALESCE("joined"."t_quantity", "joined"."quantity") AS "quantity", COALESCE("joined"."t_discount", "joined"."discount") AS "discount", COALESCE("joined"."t_discount__v_double", "joined"."discount__v_double") AS "discount__v_double", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("order_id" AS BIGINT) AS "order_id", CAST("product_id" AS BIGINT) AS "product_id", CAST("unit_price" AS DOUBLE) AS "unit_price", CAST("quantity" AS BIGINT) AS "quantity", CAST("discount" AS BIGINT) AS "discount", CAST("discount__v_double" AS DOUBLE) AS "discount__v_double", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "order_id", "product_id", "unit_price", "quantity", "discount", "discount__v_double", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:05,536 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_detail_dto": 2218394157> (engine_adapter.py:1031)
2025-01-25 00:39:06,224 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_dto": 357419722> (evaluator.py:577)
2025-01-25 00:39:06,246 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_dto__347774268__temp' (evaluator.py:608)
2025-01-25 00:39:06,247 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" (base.py:2079)
2025-01-25 00:39:06,330 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" ("order_id" BIGINT, "customer_id" TEXT, "employee_id" BIGINT, "order_date" TIMESTAMP, "required_date" TIMESTAMP, "shipped_date" TIMESTAMP, "ship_via" BIGINT, "freight" DOUBLE, "ship_name" TEXT, "ship_address" TEXT, "ship_city" TEXT, "ship_postal_code" TEXT, "ship_country" TEXT, "ship_region" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:06,447 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."order_id" AS BIGINT) AS "order_id", CAST("c"."customer_id" AS TEXT) AS "customer_id", CAST("c"."employee_id" AS BIGINT) AS "employee_id", CAST("c"."order_date" AS TIMESTAMP) AS "order_date", CAST("c"."required_date" AS TIMESTAMP) AS "required_date", CAST("c"."shipped_date" AS TIMESTAMP) AS "shipped_date", CAST("c"."ship_via" AS BIGINT) AS "ship_via", CAST("c"."freight" AS DOUBLE) AS "freight", CAST("c"."ship_name" AS TEXT) AS "ship_name", CAST("c"."ship_address" AS TEXT) AS "ship_address", CAST("c"."ship_city" AS TEXT) AS "ship_city", CAST("c"."ship_postal_code" AS TEXT) AS "ship_postal_code", CAST("c"."ship_country" AS TEXT) AS "ship_country", CAST("c"."ship_region" AS TEXT) AS "ship_region", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."order_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."customer_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."employee_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."order_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."required_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."shipped_date" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_via" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."freight" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."ship_region" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__order_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."order_id", "static"."customer_id", "static"."employee_id", "static"."order_date", "static"."required_date", "static"."shipped_date", "static"."ship_via", "static"."freight", "static"."ship_name", "static"."ship_address", "static"."ship_city", "static"."ship_postal_code", "static"."ship_country", "static"."ship_region", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."order_id" AS "t_order_id", "latest"."customer_id" AS "t_customer_id", "latest"."employee_id" AS "t_employee_id", "latest"."order_date" AS "t_order_date", "latest"."required_date" AS "t_required_date", "latest"."shipped_date" AS "t_shipped_date", "latest"."ship_via" AS "t_ship_via", "latest"."freight" AS "t_freight", "latest"."ship_name" AS "t_ship_name", "latest"."ship_address" AS "t_ship_address", "latest"."ship_city" AS "t_ship_city", "latest"."ship_postal_code" AS "t_ship_postal_code", "latest"."ship_country" AS "t_ship_country", "latest"."ship_region" AS "t_ship_region", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."order_id" AS "order_id", "source"."customer_id" AS "customer_id", "source"."employee_id" AS "employee_id", "source"."order_date" AS "order_date", "source"."required_date" AS "required_date", "source"."shipped_date" AS "shipped_date", "source"."ship_via" AS "ship_via", "source"."freight" AS "freight", "source"."ship_name" AS "ship_name", "source"."ship_address" AS "ship_address", "source"."ship_city" AS "ship_city", "source"."ship_postal_code" AS "ship_postal_code", "source"."ship_country" AS "ship_country", "source"."ship_region" AS "ship_region", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."order_id" AS "t_order_id", "latest"."customer_id" AS "t_customer_id", "latest"."employee_id" AS "t_employee_id", "latest"."order_date" AS "t_order_date", "latest"."required_date" AS "t_required_date", "latest"."shipped_date" AS "t_shipped_date", "latest"."ship_via" AS "t_ship_via", "latest"."freight" AS "t_freight", "latest"."ship_name" AS "t_ship_name", "latest"."ship_address" AS "t_ship_address", "latest"."ship_city" AS "t_ship_city", "latest"."ship_postal_code" AS "t_ship_postal_code", "latest"."ship_country" AS "t_ship_country", "latest"."ship_region" AS "t_ship_region", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."order_id" AS "order_id", "source"."customer_id" AS "customer_id", "source"."employee_id" AS "employee_id", "source"."order_date" AS "order_date", "source"."required_date" AS "required_date", "source"."shipped_date" AS "shipped_date", "source"."ship_via" AS "ship_via", "source"."freight" AS "freight", "source"."ship_name" AS "ship_name", "source"."ship_address" AS "ship_address", "source"."ship_city" AS "ship_city", "source"."ship_postal_code" AS "ship_postal_code", "source"."ship_country" AS "ship_country", "source"."ship_region" AS "ship_region", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_order_id", "joined"."order_id") AS "order_id", COALESCE("joined"."t_customer_id", "joined"."customer_id") AS "customer_id", COALESCE("joined"."t_employee_id", "joined"."employee_id") AS "employee_id", COALESCE("joined"."t_order_date", "joined"."order_date") AS "order_date", COALESCE("joined"."t_required_date", "joined"."required_date") AS "required_date", COALESCE("joined"."t_shipped_date", "joined"."shipped_date") AS "shipped_date", COALESCE("joined"."t_ship_via", "joined"."ship_via") AS "ship_via", COALESCE("joined"."t_freight", "joined"."freight") AS "freight", COALESCE("joined"."t_ship_name", "joined"."ship_name") AS "ship_name", COALESCE("joined"."t_ship_address", "joined"."ship_address") AS "ship_address", COALESCE("joined"."t_ship_city", "joined"."ship_city") AS "ship_city", COALESCE("joined"."t_ship_postal_code", "joined"."ship_postal_code") AS "ship_postal_code", COALESCE("joined"."t_ship_country", "joined"."ship_country") AS "ship_country", COALESCE("joined"."t_ship_region", "joined"."ship_region") AS "ship_region", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("order_id" AS BIGINT) AS "order_id", CAST("customer_id" AS TEXT) AS "customer_id", CAST("employee_id" AS BIGINT) AS "employee_id", CAST("order_date" AS TIMESTAMP) AS "order_date", CAST("required_date" AS TIMESTAMP) AS "required_date", CAST("shipped_date" AS TIMESTAMP) AS "shipped_date", CAST("ship_via" AS BIGINT) AS "ship_via", CAST("freight" AS DOUBLE) AS "freight", CAST("ship_name" AS TEXT) AS "ship_name", CAST("ship_address" AS TEXT) AS "ship_address", CAST("ship_city" AS TEXT) AS "ship_city", CAST("ship_postal_code" AS TEXT) AS "ship_postal_code", CAST("ship_country" AS TEXT) AS "ship_country", CAST("ship_region" AS TEXT) AS "ship_region", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "order_id", "customer_id", "employee_id", "order_date", "required_date", "shipped_date", "ship_via", "freight", "ship_name", "ship_address", "ship_city", "ship_postal_code", "ship_country", "ship_region", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:06,704 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__order_dto": 357419722> (engine_adapter.py:1031)
2025-01-25 00:39:07,388 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__product_dto": 3260133097> (evaluator.py:577)
2025-01-25 00:39:07,408 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__product_dto__2827898724__temp' (evaluator.py:608)
2025-01-25 00:39:07,409 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" (base.py:2079)
2025-01-25 00:39:07,438 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" ("product_id" BIGINT, "product_name" TEXT, "supplier_id" BIGINT, "category_id" BIGINT, "quantity_per_unit" TEXT, "unit_price" DOUBLE, "units_in_stock" BIGINT, "units_on_order" BIGINT, "reorder_level" BIGINT, "discontinued" BOOLEAN, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:07,553 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."product_id" AS BIGINT) AS "product_id", CAST("c"."product_name" AS TEXT) AS "product_name", CAST("c"."supplier_id" AS BIGINT) AS "supplier_id", CAST("c"."category_id" AS BIGINT) AS "category_id", CAST("c"."quantity_per_unit" AS TEXT) AS "quantity_per_unit", CAST("c"."unit_price" AS DOUBLE) AS "unit_price", CAST("c"."units_in_stock" AS BIGINT) AS "units_in_stock", CAST("c"."units_on_order" AS BIGINT) AS "units_on_order", CAST("c"."reorder_level" AS BIGINT) AS "reorder_level", CAST("c"."discontinued" AS BOOLEAN) AS "discontinued", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."product_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."product_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."supplier_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."category_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."quantity_per_unit" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."unit_price" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."units_in_stock" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."units_on_order" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."reorder_level" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."discontinued" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__product_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."product_id", "static"."product_name", "static"."supplier_id", "static"."category_id", "static"."quantity_per_unit", "static"."unit_price", "static"."units_in_stock", "static"."units_on_order", "static"."reorder_level", "static"."discontinued", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."product_id" AS "t_product_id", "latest"."product_name" AS "t_product_name", "latest"."supplier_id" AS "t_supplier_id", "latest"."category_id" AS "t_category_id", "latest"."quantity_per_unit" AS "t_quantity_per_unit", "latest"."unit_price" AS "t_unit_price", "latest"."units_in_stock" AS "t_units_in_stock", "latest"."units_on_order" AS "t_units_on_order", "latest"."reorder_level" AS "t_reorder_level", "latest"."discontinued" AS "t_discontinued", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."product_id" AS "product_id", "source"."product_name" AS "product_name", "source"."supplier_id" AS "supplier_id", "source"."category_id" AS "category_id", "source"."quantity_per_unit" AS "quantity_per_unit", "source"."unit_price" AS "unit_price", "source"."units_in_stock" AS "units_in_stock", "source"."units_on_order" AS "units_on_order", "source"."reorder_level" AS "reorder_level", "source"."discontinued" AS "discontinued", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."product_id" AS "t_product_id", "latest"."product_name" AS "t_product_name", "latest"."supplier_id" AS "t_supplier_id", "latest"."category_id" AS "t_category_id", "latest"."quantity_per_unit" AS "t_quantity_per_unit", "latest"."unit_price" AS "t_unit_price", "latest"."units_in_stock" AS "t_units_in_stock", "latest"."units_on_order" AS "t_units_on_order", "latest"."reorder_level" AS "t_reorder_level", "latest"."discontinued" AS "t_discontinued", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."product_id" AS "product_id", "source"."product_name" AS "product_name", "source"."supplier_id" AS "supplier_id", "source"."category_id" AS "category_id", "source"."quantity_per_unit" AS "quantity_per_unit", "source"."unit_price" AS "unit_price", "source"."units_in_stock" AS "units_in_stock", "source"."units_on_order" AS "units_on_order", "source"."reorder_level" AS "reorder_level", "source"."discontinued" AS "discontinued", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_product_id", "joined"."product_id") AS "product_id", COALESCE("joined"."t_product_name", "joined"."product_name") AS "product_name", COALESCE("joined"."t_supplier_id", "joined"."supplier_id") AS "supplier_id", COALESCE("joined"."t_category_id", "joined"."category_id") AS "category_id", COALESCE("joined"."t_quantity_per_unit", "joined"."quantity_per_unit") AS "quantity_per_unit", COALESCE("joined"."t_unit_price", "joined"."unit_price") AS "unit_price", COALESCE("joined"."t_units_in_stock", "joined"."units_in_stock") AS "units_in_stock", COALESCE("joined"."t_units_on_order", "joined"."units_on_order") AS "units_on_order", COALESCE("joined"."t_reorder_level", "joined"."reorder_level") AS "reorder_level", COALESCE("joined"."t_discontinued", "joined"."discontinued") AS "discontinued", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("product_id" AS BIGINT) AS "product_id", CAST("product_name" AS TEXT) AS "product_name", CAST("supplier_id" AS BIGINT) AS "supplier_id", CAST("category_id" AS BIGINT) AS "category_id", CAST("quantity_per_unit" AS TEXT) AS "quantity_per_unit", CAST("unit_price" AS DOUBLE) AS "unit_price", CAST("units_in_stock" AS BIGINT) AS "units_in_stock", CAST("units_on_order" AS BIGINT) AS "units_on_order", CAST("reorder_level" AS BIGINT) AS "reorder_level", CAST("discontinued" AS BOOLEAN) AS "discontinued", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "product_id", "product_name", "supplier_id", "category_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level", "discontinued", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:07,813 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__product_dto": 3260133097> (engine_adapter.py:1031)
2025-01-25 00:39:08,496 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__region_dto": 64704867> (evaluator.py:577)
2025-01-25 00:39:08,503 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__region_dto__163296225__temp' (evaluator.py:608)
2025-01-25 00:39:08,504 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" (base.py:2079)
2025-01-25 00:39:08,517 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" ("region_id" BIGINT, "region_description" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:08,628 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."region_id" AS BIGINT) AS "region_id", CAST("c"."region_description" AS TEXT) AS "region_description", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."region_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region_description" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__region_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."region_id", "static"."region_description", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."region_id" AS "t_region_id", "latest"."region_description" AS "t_region_description", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."region_id" AS "region_id", "source"."region_description" AS "region_description", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."region_id" AS "t_region_id", "latest"."region_description" AS "t_region_description", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."region_id" AS "region_id", "source"."region_description" AS "region_description", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_region_id", "joined"."region_id") AS "region_id", COALESCE("joined"."t_region_description", "joined"."region_description") AS "region_description", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("region_id" AS BIGINT) AS "region_id", CAST("region_description" AS TEXT) AS "region_description", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "region_id", "region_description", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:08,878 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__region_dto": 64704867> (engine_adapter.py:1031)
2025-01-25 00:39:09,564 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__shipper_dto": 4242341337> (evaluator.py:577)
2025-01-25 00:39:09,575 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__shipper_dto__87578496__temp' (evaluator.py:608)
2025-01-25 00:39:09,575 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" (base.py:2079)
2025-01-25 00:39:09,591 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" ("shipper_id" BIGINT, "company_name" TEXT, "phone" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:09,704 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."shipper_id" AS BIGINT) AS "shipper_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."shipper_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__shipper_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."shipper_id", "static"."company_name", "static"."phone", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."shipper_id" AS "t_shipper_id", "latest"."company_name" AS "t_company_name", "latest"."phone" AS "t_phone", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."shipper_id" AS "shipper_id", "source"."company_name" AS "company_name", "source"."phone" AS "phone", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."shipper_id" AS "t_shipper_id", "latest"."company_name" AS "t_company_name", "latest"."phone" AS "t_phone", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."shipper_id" AS "shipper_id", "source"."company_name" AS "company_name", "source"."phone" AS "phone", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_shipper_id", "joined"."shipper_id") AS "shipper_id", COALESCE("joined"."t_company_name", "joined"."company_name") AS "company_name", COALESCE("joined"."t_phone", "joined"."phone") AS "phone", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("shipper_id" AS BIGINT) AS "shipper_id", CAST("company_name" AS TEXT) AS "company_name", CAST("phone" AS TEXT) AS "phone", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "shipper_id", "company_name", "phone", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:09,959 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__shipper_dto": 4242341337> (engine_adapter.py:1031)
2025-01-25 00:39:10,650 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__supplier_dto": 3378220366> (evaluator.py:577)
2025-01-25 00:39:10,670 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__supplier_dto__4106408782__temp' (evaluator.py:608)
2025-01-25 00:39:10,670 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" (base.py:2079)
2025-01-25 00:39:10,693 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" ("supplier_id" BIGINT, "company_name" TEXT, "contact_name" TEXT, "contact_title" TEXT, "address" TEXT, "city" TEXT, "postal_code" TEXT, "country" TEXT, "phone" TEXT, "region" TEXT, "home_page" TEXT, "fax" TEXT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:10,811 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."supplier_id" AS BIGINT) AS "supplier_id", CAST("c"."company_name" AS TEXT) AS "company_name", CAST("c"."contact_name" AS TEXT) AS "contact_name", CAST("c"."contact_title" AS TEXT) AS "contact_title", CAST("c"."address" AS TEXT) AS "address", CAST("c"."city" AS TEXT) AS "city", CAST("c"."postal_code" AS TEXT) AS "postal_code", CAST("c"."country" AS TEXT) AS "country", CAST("c"."phone" AS TEXT) AS "phone", CAST("c"."region" AS TEXT) AS "region", CAST("c"."home_page" AS TEXT) AS "home_page", CAST("c"."fax" AS TEXT) AS "fax", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."supplier_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."company_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_name" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."contact_title" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."address" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."city" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."postal_code" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."country" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."phone" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."home_page" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."fax" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__supplier_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."supplier_id", "static"."company_name", "static"."contact_name", "static"."contact_title", "static"."address", "static"."city", "static"."postal_code", "static"."country", "static"."phone", "static"."region", "static"."home_page", "static"."fax", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."supplier_id" AS "t_supplier_id", "latest"."company_name" AS "t_company_name", "latest"."contact_name" AS "t_contact_name", "latest"."contact_title" AS "t_contact_title", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."phone" AS "t_phone", "latest"."region" AS "t_region", "latest"."home_page" AS "t_home_page", "latest"."fax" AS "t_fax", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."supplier_id" AS "supplier_id", "source"."company_name" AS "company_name", "source"."contact_name" AS "contact_name", "source"."contact_title" AS "contact_title", "source"."address" AS "address", "source"."city" AS "city", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."phone" AS "phone", "source"."region" AS "region", "source"."home_page" AS "home_page", "source"."fax" AS "fax", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."supplier_id" AS "t_supplier_id", "latest"."company_name" AS "t_company_name", "latest"."contact_name" AS "t_contact_name", "latest"."contact_title" AS "t_contact_title", "latest"."address" AS "t_address", "latest"."city" AS "t_city", "latest"."postal_code" AS "t_postal_code", "latest"."country" AS "t_country", "latest"."phone" AS "t_phone", "latest"."region" AS "t_region", "latest"."home_page" AS "t_home_page", "latest"."fax" AS "t_fax", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."supplier_id" AS "supplier_id", "source"."company_name" AS "company_name", "source"."contact_name" AS "contact_name", "source"."contact_title" AS "contact_title", "source"."address" AS "address", "source"."city" AS "city", "source"."postal_code" AS "postal_code", "source"."country" AS "country", "source"."phone" AS "phone", "source"."region" AS "region", "source"."home_page" AS "home_page", "source"."fax" AS "fax", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_supplier_id", "joined"."supplier_id") AS "supplier_id", COALESCE("joined"."t_company_name", "joined"."company_name") AS "company_name", COALESCE("joined"."t_contact_name", "joined"."contact_name") AS "contact_name", COALESCE("joined"."t_contact_title", "joined"."contact_title") AS "contact_title", COALESCE("joined"."t_address", "joined"."address") AS "address", COALESCE("joined"."t_city", "joined"."city") AS "city", COALESCE("joined"."t_postal_code", "joined"."postal_code") AS "postal_code", COALESCE("joined"."t_country", "joined"."country") AS "country", COALESCE("joined"."t_phone", "joined"."phone") AS "phone", COALESCE("joined"."t_region", "joined"."region") AS "region", COALESCE("joined"."t_home_page", "joined"."home_page") AS "home_page", COALESCE("joined"."t_fax", "joined"."fax") AS "fax", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("supplier_id" AS BIGINT) AS "supplier_id", CAST("company_name" AS TEXT) AS "company_name", CAST("contact_name" AS TEXT) AS "contact_name", CAST("contact_title" AS TEXT) AS "contact_title", CAST("address" AS TEXT) AS "address", CAST("city" AS TEXT) AS "city", CAST("postal_code" AS TEXT) AS "postal_code", CAST("country" AS TEXT) AS "country", CAST("phone" AS TEXT) AS "phone", CAST("region" AS TEXT) AS "region", CAST("home_page" AS TEXT) AS "home_page", CAST("fax" AS TEXT) AS "fax", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "postal_code", "country", "phone", "region", "home_page", "fax", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:11,067 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__supplier_dto": 3378220366> (engine_adapter.py:1031)
2025-01-25 00:39:11,750 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__territory_dto": 225752703> (evaluator.py:577)
2025-01-25 00:39:11,762 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-01-23 00:00:00, 2025-01-24 23:35:00) into obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__territory_dto__2324498129__temp' (evaluator.py:608)
2025-01-25 00:39:11,762 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DESCRIBE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" (base.py:2079)
2025-01-25 00:39:11,848 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" ("territory_id" TEXT, "territory_description" TEXT, "region_id" BIGINT, "_dlt_load_id" TEXT, "_dlt_id" TEXT, "_dlt_extracted_at" TIMESTAMPTZ, "_sqlmesh_hash_diff" TEXT, "_sqlmesh_loaded_at" TIMESTAMP, "_sqlmesh_valid_from" TIMESTAMP, "_sqlmesh_valid_to" TIMESTAMP) (base.py:2079)
2025-01-25 00:39:11,964 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE TABLE "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" AS WITH "source" AS (SELECT DISTINCT ON ("_sqlmesh_hash_diff") TRUE AS "_exists", "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at" FROM (SELECT CAST("c"."territory_id" AS TEXT) AS "territory_id", CAST("c"."territory_description" AS TEXT) AS "territory_description", CAST("c"."region_id" AS BIGINT) AS "region_id", CAST("c"."_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("c"."_dlt_id" AS TEXT) AS "_dlt_id", TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) AS "_dlt_extracted_at", MD5(CONCAT(COALESCE(CAST("c"."territory_id" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."territory_description" AS TEXT), '_sqlmesh_surrogate_key_null_'), '|', COALESCE(CAST("c"."region_id" AS TEXT), '_sqlmesh_surrogate_key_null_'))) AS "_sqlmesh_hash_diff", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_loaded_at" FROM "obsidian_insights"."bronze"."raw__northwind__territory_dto" AS "c" WHERE TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) <= '2025-01-24' AND TO_TIMESTAMP(CAST("c"."_dlt_load_id" AS DOUBLE)) >= '2025-01-23') AS "raw_source"), "static" AS (SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" WHERE NOT "_sqlmesh_valid_to" IS NULL LIMIT 0), "latest" AS (SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to", TRUE AS "_exists" FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" WHERE "_sqlmesh_valid_to" IS NULL LIMIT 0), "deleted" AS (SELECT "static"."territory_id", "static"."territory_description", "static"."region_id", "static"."_dlt_load_id", "static"."_dlt_id", "static"."_dlt_extracted_at", "static"."_sqlmesh_hash_diff", "static"."_sqlmesh_loaded_at", "static"."_sqlmesh_valid_from", "static"."_sqlmesh_valid_to" FROM "static" LEFT JOIN "latest" ON "static"."_sqlmesh_hash_diff" = "latest"."_sqlmesh_hash_diff" WHERE "latest"."_sqlmesh_valid_to" IS NULL), "latest_deleted" AS (SELECT TRUE AS "_exists", "_sqlmesh_hash_diff" AS "_key0", MAX("_sqlmesh_valid_to") AS "_sqlmesh_valid_to" FROM "deleted" GROUP BY "_sqlmesh_hash_diff"), "joined" AS (SELECT "source"."_exists" AS "_exists", "latest"."territory_id" AS "t_territory_id", "latest"."territory_description" AS "t_territory_description", "latest"."region_id" AS "t_region_id", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."territory_id" AS "territory_id", "source"."territory_description" AS "territory_description", "source"."region_id" AS "region_id", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" LEFT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" UNION ALL SELECT "source"."_exists" AS "_exists", "latest"."territory_id" AS "t_territory_id", "latest"."territory_description" AS "t_territory_description", "latest"."region_id" AS "t_region_id", "latest"."_dlt_load_id" AS "t__dlt_load_id", "latest"."_dlt_id" AS "t__dlt_id", "latest"."_dlt_extracted_at" AS "t__dlt_extracted_at", "latest"."_sqlmesh_hash_diff" AS "t__sqlmesh_hash_diff", "latest"."_sqlmesh_loaded_at" AS "t__sqlmesh_loaded_at", "latest"."_sqlmesh_valid_from" AS "t__sqlmesh_valid_from", "latest"."_sqlmesh_valid_to" AS "t__sqlmesh_valid_to", "source"."territory_id" AS "territory_id", "source"."territory_description" AS "territory_description", "source"."region_id" AS "region_id", "source"."_dlt_load_id" AS "_dlt_load_id", "source"."_dlt_id" AS "_dlt_id", "source"."_dlt_extracted_at" AS "_dlt_extracted_at", "source"."_sqlmesh_hash_diff" AS "_sqlmesh_hash_diff", "source"."_sqlmesh_loaded_at" AS "_sqlmesh_loaded_at" FROM "latest" RIGHT JOIN "source" ON "latest"."_sqlmesh_hash_diff" = "source"."_sqlmesh_hash_diff" WHERE "latest"."_exists" IS NULL), "updated_rows" AS (SELECT COALESCE("joined"."t_territory_id", "joined"."territory_id") AS "territory_id", COALESCE("joined"."t_territory_description", "joined"."territory_description") AS "territory_description", COALESCE("joined"."t_region_id", "joined"."region_id") AS "region_id", COALESCE("joined"."t__dlt_load_id", "joined"."_dlt_load_id") AS "_dlt_load_id", COALESCE("joined"."t__dlt_id", "joined"."_dlt_id") AS "_dlt_id", COALESCE("joined"."t__dlt_extracted_at", "joined"."_dlt_extracted_at") AS "_dlt_extracted_at", COALESCE("joined"."t__sqlmesh_hash_diff", "joined"."_sqlmesh_hash_diff") AS "_sqlmesh_hash_diff", COALESCE("joined"."t__sqlmesh_loaded_at", "joined"."_sqlmesh_loaded_at") AS "_sqlmesh_loaded_at", COALESCE("t__sqlmesh_valid_from", CAST('1970-01-01 00:00:00' AS TIMESTAMP)) AS "_sqlmesh_valid_from", CASE WHEN (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL)) THEN CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) ELSE "t__sqlmesh_valid_to" END AS "_sqlmesh_valid_to" FROM "joined" LEFT JOIN "latest_deleted" ON "joined"."_sqlmesh_hash_diff" = "latest_deleted"."_key0"), "inserted_rows" AS (SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", CAST('2025-01-24 23:39:00.470000' AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST(NULL AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM "joined" WHERE (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) AND ("joined"."_sqlmesh_hash_diff" <> "joined"."t__sqlmesh_hash_diff" OR ("joined"."t__sqlmesh_hash_diff" IS NULL AND NOT "joined"."_sqlmesh_hash_diff" IS NULL) OR (NOT "joined"."t__sqlmesh_hash_diff" IS NULL AND "joined"."_sqlmesh_hash_diff" IS NULL))) SELECT CAST("territory_id" AS TEXT) AS "territory_id", CAST("territory_description" AS TEXT) AS "territory_description", CAST("region_id" AS BIGINT) AS "region_id", CAST("_dlt_load_id" AS TEXT) AS "_dlt_load_id", CAST("_dlt_id" AS TEXT) AS "_dlt_id", CAST("_dlt_extracted_at" AS TIMESTAMPTZ) AS "_dlt_extracted_at", CAST("_sqlmesh_hash_diff" AS TEXT) AS "_sqlmesh_hash_diff", CAST("_sqlmesh_loaded_at" AS TIMESTAMP) AS "_sqlmesh_loaded_at", CAST("_sqlmesh_valid_from" AS TIMESTAMP) AS "_sqlmesh_valid_from", CAST("_sqlmesh_valid_to" AS TIMESTAMP) AS "_sqlmesh_valid_to" FROM (SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "static" UNION ALL SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "updated_rows" UNION ALL SELECT "territory_id", "territory_description", "region_id", "_dlt_load_id", "_dlt_id", "_dlt_extracted_at", "_sqlmesh_hash_diff", "_sqlmesh_loaded_at", "_sqlmesh_valid_from", "_sqlmesh_valid_to" FROM "inserted_rows") AS "_subquery" (base.py:2079)
2025-01-25 00:39:12,213 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Adding dev interval (2025-01-23 00:00:00, 2025-01-24 23:35:00) for snapshot SnapshotId<"obsidian_insights"."bronze"."snp__northwind__territory_dto": 225752703> (engine_adapter.py:1031)
2025-01-25 00:39:12,906 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Promoting environment 'mattiasthalen__main' (engine_adapter.py:280)
2025-01-25 00:39:13,935 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating schema 'obsidian_insights.bronze__mattiasthalen__main' (evaluator.py:1044)
2025-01-25 00:39:13,935 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE SCHEMA IF NOT EXISTS "obsidian_insights"."bronze__mattiasthalen__main" (base.py:2079)
2025-01-25 00:39:14,169 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__category_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__category_dto__1591367316__temp' (evaluator.py:1315)
2025-01-25 00:39:14,170 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__category_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__category_dto__1591367316__temp" (base.py:2079)
2025-01-25 00:39:14,400 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__customer_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__customer_dto__3769547417__temp' (evaluator.py:1315)
2025-01-25 00:39:14,401 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__customer_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__customer_dto__3769547417__temp" (base.py:2079)
2025-01-25 00:39:14,629 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__detail' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__detail__1071603293__temp' (evaluator.py:1315)
2025-01-25 00:39:14,630 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__detail" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__detail__1071603293__temp" (base.py:2079)
2025-01-25 00:39:14,874 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__employee_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__employee_dto__3691793490__temp' (evaluator.py:1315)
2025-01-25 00:39:14,875 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__employee_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__employee_dto__3691793490__temp" (base.py:2079)
2025-01-25 00:39:15,105 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__order_detail_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_detail_dto__1441025332__temp' (evaluator.py:1315)
2025-01-25 00:39:15,106 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__order_detail_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_detail_dto__1441025332__temp" (base.py:2079)
2025-01-25 00:39:15,334 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__order_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__order_dto__347774268__temp' (evaluator.py:1315)
2025-01-25 00:39:15,334 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__order_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__order_dto__347774268__temp" (base.py:2079)
2025-01-25 00:39:15,562 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__product_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__product_dto__2827898724__temp' (evaluator.py:1315)
2025-01-25 00:39:15,563 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__product_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__product_dto__2827898724__temp" (base.py:2079)
2025-01-25 00:39:15,792 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__region_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__region_dto__163296225__temp' (evaluator.py:1315)
2025-01-25 00:39:15,792 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__region_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__region_dto__163296225__temp" (base.py:2079)
2025-01-25 00:39:16,022 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__shipper_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__shipper_dto__87578496__temp' (evaluator.py:1315)
2025-01-25 00:39:16,023 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__shipper_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__shipper_dto__87578496__temp" (base.py:2079)
2025-01-25 00:39:16,253 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__supplier_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__supplier_dto__4106408782__temp' (evaluator.py:1315)
2025-01-25 00:39:16,253 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__supplier_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__supplier_dto__4106408782__temp" (base.py:2079)
2025-01-25 00:39:16,483 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Updating view 'obsidian_insights.bronze__mattiasthalen__main.snp__northwind__territory_dto' to point at table 'obsidian_insights.sqlmesh__bronze.bronze__snp__northwind__territory_dto__2324498129__temp' (evaluator.py:1315)
2025-01-25 00:39:16,484 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE OR REPLACE VIEW "obsidian_insights"."bronze__mattiasthalen__main"."snp__northwind__territory_dto" AS SELECT * FROM "obsidian_insights"."sqlmesh__bronze"."bronze__snp__northwind__territory_dto__2324498129__temp" (base.py:2079)
2025-01-25 00:39:16,713 - MainThread - sqlmesh.core.state_sync.engine_adapter - INFO - Finalizing environment 'mattiasthalen__main' (engine_adapter.py:405)
2025-01-25 00:39:16,964 - MainThread - root - INFO - Shutting down the event dispatcher (dispatcher.py:159)
